# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "3.0.0")
   message(FATAL_ERROR "CMake >= 3.0.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 3.0.0...3.28)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS TritonCore::triton-core-backendapi TritonCore::triton-core-repoagentapi TritonCore::triton-core-cacheapi TritonCore::triton-core-serverapi TritonCore::triton-core-serverstub)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Create imported target TritonCore::triton-core-backendapi
add_library(TritonCore::triton-core-backendapi INTERFACE IMPORTED)

set_target_properties(TritonCore::triton-core-backendapi PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/home/kprashanth/code/server/_deps/repo-core-src/include"
)

# Create imported target TritonCore::triton-core-repoagentapi
add_library(TritonCore::triton-core-repoagentapi INTERFACE IMPORTED)

set_target_properties(TritonCore::triton-core-repoagentapi PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/home/kprashanth/code/server/_deps/repo-core-src/include"
)

# Create imported target TritonCore::triton-core-cacheapi
add_library(TritonCore::triton-core-cacheapi INTERFACE IMPORTED)

set_target_properties(TritonCore::triton-core-cacheapi PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/home/kprashanth/code/server/_deps/repo-core-src/include"
)

# Create imported target TritonCore::triton-core-serverapi
add_library(TritonCore::triton-core-serverapi INTERFACE IMPORTED)

set_target_properties(TritonCore::triton-core-serverapi PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/home/kprashanth/code/server/_deps/repo-core-src/include"
)

# Create imported target TritonCore::triton-core-serverstub
add_library(TritonCore::triton-core-serverstub SHARED IMPORTED)

# Import target "TritonCore::triton-core-serverstub" for configuration ""
set_property(TARGET TritonCore::triton-core-serverstub APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
set_target_properties(TritonCore::triton-core-serverstub PROPERTIES
  IMPORTED_LOCATION_NOCONFIG "/home/kprashanth/code/server/_deps/repo-core-build/libtritonserver.so"
  IMPORTED_SONAME_NOCONFIG "libtritonserver.so"
  )

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
